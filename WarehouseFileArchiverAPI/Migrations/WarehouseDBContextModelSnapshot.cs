// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WarehouseFileArchiverAPI.Contexts;

#nullable disable

namespace WarehouseFileArchiverAPI.Migrations
{
    [DbContext(typeof(WarehouseDBContext))]
    partial class WarehouseDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.AccessLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Access")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("AccessLevels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Access = "Admin",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Changes")
                        .HasColumnType("text");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccessLevelId")
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AccessLevelId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            ContactNumber = "",
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "User"
                        });
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.FileArchive", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CanSummarise")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UploadedById")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UploadedById");

                    b.ToTable("FileArchives");
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.FileVersion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ContentTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileArchiveId")
                        .HasColumnType("uuid");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ContentTypeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FileArchiveId");

                    b.ToTable("FileVersions");
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.MediaType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MediaTypes");
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccessLevelId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccessLevelId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            AccessLevelId = new Guid("11111111-1111-1111-1111-111111111111"),
                            IsDeleted = false,
                            RoleName = "Admin"
                        });
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.RoleCategoryAccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CanDownload")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanUpload")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleCategoryAccesses");
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Username");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Username = "admin@gmail.com",
                            IsDeleted = false,
                            PasswordHash = "$2a$11$3kQN.ZcNLksh7Bp0surRlu.zvuZ3YDe7GPug4tTHfJTO817Al7ru2",
                            RoleId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.Category", b =>
                {
                    b.HasOne("WarehouseFileArchiverAPI.Models.AccessLevel", "AccessLevel")
                        .WithMany("Categories")
                        .HasForeignKey("AccessLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Fk_Category_Access");

                    b.Navigation("AccessLevel");
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.Employee", b =>
                {
                    b.HasOne("WarehouseFileArchiverAPI.Models.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("WarehouseFileArchiverAPI.Models.Employee", "Email")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Employee_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.FileArchive", b =>
                {
                    b.HasOne("WarehouseFileArchiverAPI.Models.Category", "Category")
                        .WithMany("FileArchives")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_FileArchive_Category");

                    b.HasOne("WarehouseFileArchiverAPI.Models.Employee", "Employee")
                        .WithMany("FileArchives")
                        .HasForeignKey("UploadedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_FileArchive_Employee");

                    b.Navigation("Category");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.FileVersion", b =>
                {
                    b.HasOne("WarehouseFileArchiverAPI.Models.MediaType", "ContentType")
                        .WithMany("FileVersions")
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_FileVersion_MediaType");

                    b.HasOne("WarehouseFileArchiverAPI.Models.Employee", "Created")
                        .WithMany("fileVersions")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_FileVersion_Employee");

                    b.HasOne("WarehouseFileArchiverAPI.Models.FileArchive", "FileArchive")
                        .WithMany("FileVersions")
                        .HasForeignKey("FileArchiveId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_FileVersion_Archive");

                    b.Navigation("ContentType");

                    b.Navigation("Created");

                    b.Navigation("FileArchive");
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.Role", b =>
                {
                    b.HasOne("WarehouseFileArchiverAPI.Models.AccessLevel", "AccessLevel")
                        .WithMany("Roles")
                        .HasForeignKey("AccessLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Fk_Role_Access");

                    b.Navigation("AccessLevel");
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.RoleCategoryAccess", b =>
                {
                    b.HasOne("WarehouseFileArchiverAPI.Models.Category", "Category")
                        .WithMany("RoleCategoryAccesses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_RoleCategory_Category");

                    b.HasOne("WarehouseFileArchiverAPI.Models.Role", "Role")
                        .WithMany("RoleCategoryAccesses")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.User", b =>
                {
                    b.HasOne("WarehouseFileArchiverAPI.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_User_Role");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.AccessLevel", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.Category", b =>
                {
                    b.Navigation("FileArchives");

                    b.Navigation("RoleCategoryAccesses");
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.Employee", b =>
                {
                    b.Navigation("FileArchives");

                    b.Navigation("fileVersions");
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.FileArchive", b =>
                {
                    b.Navigation("FileVersions");
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.MediaType", b =>
                {
                    b.Navigation("FileVersions");
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.Role", b =>
                {
                    b.Navigation("RoleCategoryAccesses");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WarehouseFileArchiverAPI.Models.User", b =>
                {
                    b.Navigation("Employee");
                });
#pragma warning restore 612, 618
        }
    }
}
